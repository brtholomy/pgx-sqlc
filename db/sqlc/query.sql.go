// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (id, user_id, name, price) VALUES ($1, $2, $3, $4)
RETURNING id, user_id, name, price
`

type CreateProductParams struct {
	ID     pgtype.UUID    `db:"id" json:"id"`
	UserID pgtype.UUID    `db:"user_id" json:"user_id"`
	Name   string         `db:"name" json:"name"`
	Price  pgtype.Numeric `db:"price" json:"price"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.Price,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Price,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, name, email) VALUES ($1, $2, $3)
RETURNING id, email, name
`

type CreateUserParams struct {
	ID    pgtype.UUID `db:"id" json:"id"`
	Name  string      `db:"name" json:"name"`
	Email string      `db:"email" json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.ID, arg.Name, arg.Email)
	var i User
	err := row.Scan(&i.ID, &i.Email, &i.Name)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, email, name FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(&i.ID, &i.Email, &i.Name)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, name FROM users
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Email, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
