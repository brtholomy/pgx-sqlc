// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO bank (first, last, email) VALUES ($1, $2, $3)
RETURNING id, first, last, email, amount, creation
`

type CreateAccountParams struct {
	First string `db:"first" json:"first"`
	Last  string `db:"last" json:"last"`
	Email string `db:"email" json:"email"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Bank, error) {
	row := q.db.QueryRow(ctx, createAccount, arg.First, arg.Last, arg.Email)
	var i Bank
	err := row.Scan(
		&i.ID,
		&i.First,
		&i.Last,
		&i.Email,
		&i.Amount,
		&i.Creation,
	)
	return i, err
}

const getAccount = `-- name: GetAccount :one
SELECT id, first, last, email, amount, creation FROM bank
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id pgtype.UUID) (Bank, error) {
	row := q.db.QueryRow(ctx, getAccount, id)
	var i Bank
	err := row.Scan(
		&i.ID,
		&i.First,
		&i.Last,
		&i.Email,
		&i.Amount,
		&i.Creation,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, first, last, email, amount, creation FROM bank
ORDER BY creation
`

func (q *Queries) ListAccounts(ctx context.Context) ([]Bank, error) {
	rows, err := q.db.Query(ctx, listAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bank
	for rows.Next() {
		var i Bank
		if err := rows.Scan(
			&i.ID,
			&i.First,
			&i.Last,
			&i.Email,
			&i.Amount,
			&i.Creation,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
