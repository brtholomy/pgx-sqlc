package main

import (
	"context"
	"errors"
	"fmt"
	"os"
	"time"

	"github.com/Rhymond/go-money"
	"github.com/jackc/pgx/v5"
)

type Client struct {
	Name string
	Role string
	Age  int
}

type Account struct {
	First    string
	Last     string
	Email    string
	Amount   *money.Money
	Creation *time.Time
}

func InsertBank(conn *pgx.Conn, account Account) error {
	cmd := fmt.Sprintf(`INSERT INTO bank (first, last, email)
VALUES ('%s', '%s', '%s');`, account.First, account.Last, account.Email)

	sql_status, err := conn.Exec(context.Background(), cmd)
	if err != nil {
		return err
	}
	if sql_status.RowsAffected() != 1 {
		return errors.New("Failed to insert")
	}
	fmt.Println(sql_status.String())
	return nil
}

func Insert(conn *pgx.Conn, table string, client Client) error {
	cmd := fmt.Sprintf(`INSERT INTO %s (name, role, age)
VALUES ('%s', '%s', %v);`, table, client.Name, client.Role, client.Age)

	sql_status, err := conn.Exec(context.Background(), cmd)
	if err != nil {
		return err
	}
	if sql_status.RowsAffected() != 1 {
		return errors.New("Failed to insert")
	}
	fmt.Println(sql_status.String())
	return nil
}

func GetColumn(conn *pgx.Conn, table string, column string) error {
	cmd := fmt.Sprintf(`SELECT %s FROM %s;`, column, table)
	rows, err := conn.Query(context.Background(), cmd)
	if err != nil {
		return err
	}
	rows_sl, err := pgx.CollectRows(rows, pgx.RowTo[string])
	if err != nil {
		return err
	}
	fmt.Println(rows_sl)
	return nil
}

func main() {
	// conn, err := pgx.Connect(context.Background(), os.Getenv("DATABASE_URL"))
	conn, err := pgx.Connect(context.Background(), "user=bth database=testdb")
	if err != nil {
		fmt.Fprintf(os.Stderr, "Unable to connect to database: %v\n", err)
		os.Exit(1)
	}
	defer conn.Close(context.Background())

	err = InsertBank(conn, Account{"Joe", "Schmoe", "j@s.com", nil, nil})
	if err != nil {
		panic(err)
	}

	err = GetColumn(conn, "people", "name")
	if err != nil {
		panic(err)
	}
}
