package pages

import (
	"pgx-sqlc/ui/layouts"
	// "pgx-sqlc/ui/templui/components/input"
	"pgx-sqlc/ui/templui/components/button"
	"pgx-sqlc/ui/templui/components/form"
	"pgx-sqlc/ui/templui/components/icon"
	"pgx-sqlc/ui/templui/components/selectbox"
	"pgx-sqlc/ui/templui/components/table"
)

type InvoiceItem struct {
	Product Product
	ID string
	// TODO: markup?
	// Amount string
}

templ Invoice(items []InvoiceItem, products []Product) {
	@layouts.BaseLayout() {
		@DisplayInvoice(items)
		@AddProduct(products)
	}
}

templ DisplayInvoice(items []InvoiceItem) {

	@table.Table(
		table.Props{ ID: "invoice-table", }) {
			@table.Caption() {
				Invoice items
			}
			@table.Header() {
				@table.Row() {
					@table.Head() {
						Name
					}
					@table.Head() {
						Price
					}
					@table.Head() {
						Actions
					}
				}
			}
			@table.Body() {

				for _, i := range items {
					@table.Row(table.RowProps{
								Attributes: templ.Attributes{
									"name": "ID",
								},

				}) {
				@table.Cell() {
					{i.Product.Name}
				}
				@table.Cell() {
					{i.Product.Price}
				}
				@table.Cell() {
					@button.Button(button.Props{
						Type:  button.TypeSubmit,
						Size:    button.SizeIcon,
						Variant: button.VariantOutline,
						Attributes: templ.Attributes{
							"name": "delete-invoice-item",
							"value": i.ID,
							// "hx-select": "#invoice-table",
							"hx-target": "#invoice-table",
							"hx-delete": "/invoice",
							// wasnt either of these:
							// "hx-vals": i.ID,
							// "hx-include":"[name='delete-invoice-item']",
						},
					}) {
						@icon.Trash2(icon.Props{Size: 16})
					}

				}
			}
		}
}
}
}

// TODO: use HTMX for this too?
templ AddProduct(products []Product) {

	<div class="w-full max-w-sm">
			<form
			 action="/invoice"
			 method="POST"
				>
				<input type="hidden" name="form-identifier" value="add-product-selectbox">

					@form.Item() {
						@form.Label(form.LabelProps{
							For: "select-form",
						}) {
							Product
						}
						@selectbox.SelectBox() {
							@selectbox.Trigger(selectbox.TriggerProps{
								ID:       "select-form",
								Name:     "add-product",
								Required: true,
								HasError: true,
							}) {
								@selectbox.Value(selectbox.ValueProps{
									Placeholder: "Select a product",
								})
							}
							@selectbox.Content() {

								for _, p := range products {

									@selectbox.Item(selectbox.ItemProps{
										Value: p.ID,
									}) {
										{p.Name}
									}
								}
							}
						}
						@form.Description() {
							Add from your product library
						}
						@button.Button(button.Props{
							Type:  button.TypeSubmit,
							Class: "flex items-center gap-2",
						}) {
							Submit
						}
						@form.Message(form.MessageProps{
							Variant: form.MessageVariantError,
						}) {
							A selection is required.
						}
					}

			</form>
		</div>
}
